name: Nightly Backup

on:
  schedule:
    # Runs at 2 AM UTC every day
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allows manual triggering

jobs:
  backup-repo:
    name: Backup Repository
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get all history
      
      - name: Setup Git LFS
        run: |
          git lfs install
          git lfs pull
      
      - name: Create repository backup archive
        run: |
          TIMESTAMP=$(date +'%Y%m%d_%H%M%S')
          git bundle create "repo_backup_${TIMESTAMP}.bundle" --all
      
      - name: Upload repository backup
        uses: actions/upload-artifact@v4
        with:
          name: repository-backup
          path: "*.bundle"
          retention-days: 30

  generate-sbom:
    name: Generate SBOM Report
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Generate simple SBOM for Go code
        run: |
          TIMESTAMP=$(date +'%Y%m%d_%H%M%S')
          mkdir -p sbom-reports
          
          # Create a basic SBOM placeholder
          echo '{
            "bomFormat": "CycloneDX",
            "specVersion": "1.4",
            "serialNumber": "urn:uuid:$(uuidgen)",
            "version": 1,
            "metadata": {
              "timestamp": "'$(date -Iseconds)'",
              "tools": [
                {
                  "vendor": "D Central",
                  "name": "Simple SBOM Generator",
                  "version": "1.0.0"
                }
              ],
              "component": {
                "type": "application",
                "name": "edge-gateway",
                "version": "0.1.0"
              }
            },
            "components": []
          }' > sbom-reports/go-sbom-${TIMESTAMP}.json
          
          # If Go modules exist, try to get dependency info
          if [ -f "./code/edge-gateway/go.mod" ]; then
            cd ./code/edge-gateway
            go list -m all | grep -v "edge-gateway" | while read -r module; do
              echo "Adding module: $module"
            done
            cd ../..
          fi
      
      - name: Generate simple SBOM for Node.js code
        run: |
          TIMESTAMP=$(date +'%Y%m%d_%H%M%S')
          mkdir -p sbom-reports
          
          # Create a basic SBOM placeholder
          echo '{
            "bomFormat": "CycloneDX",
            "specVersion": "1.4",
            "serialNumber": "urn:uuid:$(uuidgen)",
            "version": 1,
            "metadata": {
              "timestamp": "'$(date -Iseconds)'",
              "tools": [
                {
                  "vendor": "D Central",
                  "name": "Simple SBOM Generator",
                  "version": "1.0.0"
                }
              ],
              "component": {
                "type": "application",
                "name": "dcentral-frontend",
                "version": "0.1.0"
              }
            },
            "components": []
          }' > sbom-reports/node-sbom-${TIMESTAMP}.json
          
          # If package.json exists, try to get dependency info
          if [ -f "./code/package.json" ]; then
            cd ./code
            if [ -f "package-lock.json" ]; then
              echo "Package lock found, could extract dependencies in production"
            fi
            cd ..
          fi
      
      - name: Upload SBOM reports
        uses: actions/upload-artifact@v4
        with:
          name: sbom-reports
          path: sbom-reports/
          retention-days: 90

  backup-database:
    name: Backup Database
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # This is a placeholder for actual DB backup
      # In a real project, you would use appropriate authentication and connection strings
      - name: Placeholder for database backup
        run: |
          TIMESTAMP=$(date +'%Y%m%d_%H%M%S')
          mkdir -p db_backups
          
          echo "This is a placeholder for the database backup script." > db_backups/README.md
          echo "Backup timestamp: ${TIMESTAMP}" >> db_backups/README.md
          echo "In a real project, this would:" >> db_backups/README.md
          echo "1. Connect to production or staging database" >> db_backups/README.md
          echo "2. Execute pg_dump, mongodump, or equivalent backup utility" >> db_backups/README.md
          echo "3. Encrypt the backup file" >> db_backups/README.md
          echo "4. Upload to secure storage" >> db_backups/README.md
          
          # Create a dummy SQL dump file as a placeholder
          echo "-- Database backup for ${TIMESTAMP}
-- This is just a placeholder file

SELECT 'backup placeholder';" > db_backups/backup_${TIMESTAMP}.sql
      
      - name: Upload database backup
        uses: actions/upload-artifact@v4
        with:
          name: database-backup
          path: db_backups/
          retention-days: 14